(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define([
            'jquery',
            'moment'
        ], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('jquery'), require('moment'));
    } else {
        this.RactiveValidator = factory(jQuery, moment);
    }
}(function (__external_jQuery, __external_moment) {
    var global = this, define;
    function _require(id) {
        var module = _require.cache[id];
        if (!module) {
            var exports = {};
            module = _require.cache[id] = {
                id: id,
                exports: exports
            };
            _require.modules[id].call(exports, module, exports);
        }
        return module.exports;
    }
    _require.cache = [];
    _require.modules = [
        function (module, exports) {
            module.exports = __external_jQuery;
        },
        function (module, exports) {
            module.exports = __external_moment;
        },
        function (module, exports) {
            'use strict';
            Object.defineProperty(exports, '__esModule', { value: true });
            var _createClass = function () {
                    function defineProperties(target, props) {
                        for (var i = 0; i < props.length; i++) {
                            var descriptor = props[i];
                            descriptor.enumerable = descriptor.enumerable || false;
                            descriptor.configurable = true;
                            if ('value' in descriptor)
                                descriptor.writable = true;
                            Object.defineProperty(target, descriptor.key, descriptor);
                        }
                    }
                    return function (Constructor, protoProps, staticProps) {
                        if (protoProps)
                            defineProperties(Constructor.prototype, protoProps);
                        if (staticProps)
                            defineProperties(Constructor, staticProps);
                        return Constructor;
                    };
                }();
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError('Cannot call a class as a function');
                }
            }
            var _jquery = _require(0);
            var _jquery2 = _interopRequireDefault(_jquery);
            var FormModel = function () {
                    function FormModel(selector) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                        _classCallCheck(this, FormModel);
                        this.selector = selector;
                        this.fields = {};
                        this.errorClass = options.errorClass || 'has-error';
                        this.messageClass = options.messageClass || 'validation-message';
                        var _this = this;
                        selector.each(function () {
                            (0, _jquery2['default'])(this).find(':input').each(function () {
                                var field = (0, _jquery2['default'])(this);
                                var name = field.attr('name');
                                if (!_this.fields[name]) {
                                    _this.fields[name] = [field];
                                } else {
                                    _this.fields[name].push(field);
                                }
                            });
                        });
                    }
                    _createClass(FormModel, [
                        {
                            key: 'get',
                            value: function get(keypath) {
                                var fields = this.fields[keypath];
                                if (fields) {
                                    var values = fields.map(function (x) {
                                            return x.val();
                                        });
                                    return values.length > 1 ? values : values[0];
                                }
                            }
                        },
                        {
                            key: 'set',
                            value: function set(keypath, value) {
                                var fields = this.fields[keypath];
                                if (fields) {
                                    fields.forEach(function (field) {
                                        field.val(value);
                                    });
                                }
                            }
                        },
                        {
                            key: 'observe',
                            value: function observe(keypath, fn) {
                                this.selector.find('[name="' + keypath + '"]').on('change', function () {
                                    fn((0, _jquery2['default'])(this).val(), null, keypath);
                                });
                            }
                        },
                        {
                            key: 'setError',
                            value: function setError(keypath, value) {
                                var fields = this.fields[keypath];
                                var _this = this;
                                if (fields) {
                                    fields.forEach(function (field) {
                                        field.addClass(_this.errorClass);
                                        field.next('.' + _this.messageClass).remove();
                                        field.after((0, _jquery2['default'])('<span>').addClass(_this.messageClass).text(value));
                                    });
                                }
                            }
                        },
                        {
                            key: 'clearError',
                            value: function clearError(keypath, value) {
                                var fields = this.fields[keypath];
                                var _this = this;
                                if (fields) {
                                    fields.forEach(function (field) {
                                        field.removeClass(_this.errorClass);
                                        field.next('.' + _this.messageClass).remove();
                                    });
                                }
                            }
                        }
                    ]);
                    return FormModel;
                }();
            exports['default'] = FormModel;
            ;
            module.exports = exports['default'];
        },
        function (module, exports) {
            'use strict';
            Object.defineProperty(exports, '__esModule', { value: true });
            var _slicedToArray = function () {
                    function sliceIterator(arr, i) {
                        var _arr = [];
                        var _n = true;
                        var _d = false;
                        var _e = undefined;
                        try {
                            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                                _arr.push(_s.value);
                                if (i && _arr.length === i)
                                    break;
                            }
                        } catch (err) {
                            _d = true;
                            _e = err;
                        } finally {
                            try {
                                if (!_n && _i['return'])
                                    _i['return']();
                            } finally {
                                if (_d)
                                    throw _e;
                            }
                        }
                        return _arr;
                    }
                    return function (arr, i) {
                        if (Array.isArray(arr)) {
                            return arr;
                        } else if (Symbol.iterator in Object(arr)) {
                            return sliceIterator(arr, i);
                        } else {
                            throw new TypeError('Invalid attempt to destructure non-iterable instance');
                        }
                    };
                }();
            var _createClass = function () {
                    function defineProperties(target, props) {
                        for (var i = 0; i < props.length; i++) {
                            var descriptor = props[i];
                            descriptor.enumerable = descriptor.enumerable || false;
                            descriptor.configurable = true;
                            if ('value' in descriptor)
                                descriptor.writable = true;
                            Object.defineProperty(target, descriptor.key, descriptor);
                        }
                    }
                    return function (Constructor, protoProps, staticProps) {
                        if (protoProps)
                            defineProperties(Constructor.prototype, protoProps);
                        if (staticProps)
                            defineProperties(Constructor, staticProps);
                        return Constructor;
                    };
                }();
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError('Cannot call a class as a function');
                }
            }
            var ObjectModel = function () {
                    function ObjectModel(model) {
                        _classCallCheck(this, ObjectModel);
                        this.model = model || {};
                    }
                    _createClass(ObjectModel, [
                        {
                            key: 'get',
                            value: function get(keypath) {
                                if (!keypath) {
                                    return this.model;
                                }
                                var paths = this.expandKeypath(keypath);
                                var _this = this;
                                var results = paths.map(function (keypath) {
                                        var _this$getObj = _this.getObj(_this.model, keypath);
                                        var object = _this$getObj.object;
                                        var child = _this$getObj.child;
                                        return object[child];
                                    });
                                return results.length === 1 ? results[0] : results;
                            }
                        },
                        {
                            key: 'set',
                            value: function set(keypath, value) {
                                var paths = this.expandKeypath(keypath);
                                for (var i in paths) {
                                    var _getObj = this.getObj(this.model, keypath);
                                    var object = _getObj.object;
                                    var child = _getObj.child;
                                    object[child] = value;
                                }
                            }
                        },
                        {
                            key: 'expandKeypath',
                            value: function expandKeypath(keypath) {
                                var paths = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
                                var _ref = keypath.match(/^(([^\*]+)\.)?\*(\..*)?$/) || [];
                                var _ref2 = _slicedToArray(_ref, 4);
                                var match = _ref2[0];
                                var start = _ref2[1];
                                var path = _ref2[2];
                                var remainder = _ref2[3];
                                if (match) {
                                    var ks = this.get(path);
                                    for (var k in ks) {
                                        this.expandKeypath(start + k + remainder, paths);
                                    }
                                } else {
                                    paths.push(keypath);
                                }
                                return paths;
                            }
                        },
                        {
                            key: 'getObj',
                            value: function getObj(obj, keypath) {
                                var pos = keypath.indexOf('.');
                                if (pos === -1) {
                                    return {
                                        object: obj,
                                        child: keypath
                                    };
                                } else {
                                    var _keypath$match = keypath.match(/^([^\.]+)\.(([^\.]+).*)$/);
                                    var _keypath$match2 = _slicedToArray(_keypath$match, 4);
                                    var match = _keypath$match2[0];
                                    var _parent = _keypath$match2[1];
                                    var remainder = _keypath$match2[2];
                                    var child = _keypath$match2[3];
                                    if (!obj.hasOwnProperty(_parent)) {
                                        obj[_parent] = isNaN(parseInt(child)) ? {} : [];
                                    }
                                    return this.getObj(obj[_parent], remainder);
                                }
                            }
                        }
                    ]);
                    return ObjectModel;
                }();
            exports['default'] = ObjectModel;
            ;
            module.exports = exports['default'];
        },
        function (module, exports) {
            'use strict';
            var _slicedToArray = function () {
                    function sliceIterator(arr, i) {
                        var _arr = [];
                        var _n = true;
                        var _d = false;
                        var _e = undefined;
                        try {
                            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                                _arr.push(_s.value);
                                if (i && _arr.length === i)
                                    break;
                            }
                        } catch (err) {
                            _d = true;
                            _e = err;
                        } finally {
                            try {
                                if (!_n && _i['return'])
                                    _i['return']();
                            } finally {
                                if (_d)
                                    throw _e;
                            }
                        }
                        return _arr;
                    }
                    return function (arr, i) {
                        if (Array.isArray(arr)) {
                            return arr;
                        } else if (Symbol.iterator in Object(arr)) {
                            return sliceIterator(arr, i);
                        } else {
                            throw new TypeError('Invalid attempt to destructure non-iterable instance');
                        }
                    };
                }();
            var _createClass = function () {
                    function defineProperties(target, props) {
                        for (var i = 0; i < props.length; i++) {
                            var descriptor = props[i];
                            descriptor.enumerable = descriptor.enumerable || false;
                            descriptor.configurable = true;
                            if ('value' in descriptor)
                                descriptor.writable = true;
                            Object.defineProperty(target, descriptor.key, descriptor);
                        }
                    }
                    return function (Constructor, protoProps, staticProps) {
                        if (protoProps)
                            defineProperties(Constructor.prototype, protoProps);
                        if (staticProps)
                            defineProperties(Constructor, staticProps);
                        return Constructor;
                    };
                }();
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { 'default': obj };
            }
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError('Cannot call a class as a function');
                }
            }
            var _jquery = _require(0);
            var _jquery2 = _interopRequireDefault(_jquery);
            var _FormModel = _require(2);
            var _FormModel2 = _interopRequireDefault(_FormModel);
            var _moment = _require(1);
            var _moment2 = _interopRequireDefault(_moment);
            var _ObjectModel = _require(3);
            var _ObjectModel2 = _interopRequireDefault(_ObjectModel);
            var RactiveValidator = function () {
                    function RactiveValidator() {
                        _classCallCheck(this, RactiveValidator);
                        var _Array$prototype$slice$call$reverse = Array.prototype.slice.call(arguments).reverse();
                        var _Array$prototype$slice$call$reverse2 = _slicedToArray(_Array$prototype$slice$call$reverse, 3);
                        this.rules = _Array$prototype$slice$call$reverse2[0];
                        this.model = _Array$prototype$slice$call$reverse2[1];
                        this.basePath = _Array$prototype$slice$call$reverse2[2];
                        this.basePath = this.basePath ? this.basePath + '.' : '';
                        this.validators = RactiveValidator.validators;
                        this.enabled = true;
                        this.errorSuffix = 'Msg';
                        if (this.model)
                            this.model = this.wrapModel();
                        if (this.model && this.model.observe) {
                            this.observeModel();
                        }
                    }
                    _createClass(RactiveValidator, [
                        {
                            key: 'observeModel',
                            value: function observeModel() {
                                var _this2 = this;
                                var _this = this;
                                var result = {
                                        valid: true,
                                        model: this.wrapModel(),
                                        errors: new _ObjectModel2['default'](),
                                        data: new _ObjectModel2['default'](),
                                        groups: [],
                                        immediate: false
                                    };
                                var _loop = function (rulepath) {
                                    _this2.model.observe(rulepath, function (newValue, oldValue, keypath) {
                                        if (_this.enabled) {
                                            _this.validateKeypath(newValue, keypath, result, _this.rules[rulepath]);
                                        }
                                    }, { init: false });
                                };
                                for (var rulepath in this.rules) {
                                    _loop(rulepath);
                                }
                            }
                        },
                        {
                            key: 'enable',
                            value: function enable(value) {
                                this.enabled = value;
                                for (var keypath in this.rules) {
                                    this.model.clearError(this.basePath + keypath);
                                }
                            }
                        },
                        {
                            key: 'validate',
                            value: function validate(model) {
                                var _this3 = this;
                                var result = {
                                        valid: true,
                                        model: this.wrapModel(model),
                                        errors: new _ObjectModel2['default'](),
                                        data: new _ObjectModel2['default'](),
                                        groups: [],
                                        immediate: model != null
                                    };
                                var promises = [];
                                for (var keypath in this.rules) {
                                    var rules = this.rules[keypath];
                                    var ret = this.validateWildcardKeypath(this.basePath + keypath, result, rules);
                                    if (ret && ret.then) {
                                        promises.push(ret);
                                    }
                                }
                                var resultFn = function resultFn() {
                                    return {
                                        valid: result.valid,
                                        errors: result.errors.model,
                                        data: result.data.get(_this3.basePath.substring(0, _this3.basePath.length - 1))
                                    };
                                };
                                if (promises.length) {
                                    return Promise.all(promises).then(resultFn);
                                } else {
                                    return resultFn();
                                }
                            }
                        },
                        {
                            key: 'validateWildcardKeypath',
                            value: function validateWildcardKeypath(keypath, result, rules) {
                                var paths = result.model.expandKeypath(keypath);
                                var promises = [];
                                for (var i in paths) {
                                    var ret = this.validateKeypath(result.model.get(paths[i]), paths[i], result, rules);
                                    if (ret && ret.then) {
                                        promises.push(ret);
                                    }
                                }
                                if (promises.length) {
                                    return Promise.all(promises);
                                }
                            }
                        },
                        {
                            key: 'validateKeypath',
                            value: function validateKeypath(value, keypath, result, rules) {
                                var ar = [];
                                for (var rule in rules) {
                                    ar.push({
                                        key: rule,
                                        value: rules[rule]
                                    });
                                }
                                var coerced = this.validateKeypathRules(value, keypath, result, ar);
                                var resultFn = function resultFn(coerced) {
                                    if (result.valid) {
                                        result.data.set(keypath, typeof coerced !== 'undefined' ? coerced : value);
                                    }
                                };
                                if (coerced && coerced.then) {
                                    return coerced.then(resultFn);
                                } else {
                                    resultFn(coerced);
                                }
                            }
                        },
                        {
                            key: 'validateKeypathRules',
                            value: function validateKeypathRules(value, keypath, result, rules, i, coerced) {
                                var _this4 = this;
                                if (i === undefined)
                                    i = 0;
                                var rule = rules[i];
                                var validator = undefined;
                                if (!this.validators.hasOwnProperty(rule.key)) {
                                    if (typeof rule.value === 'function') {
                                        validator = rule.value;
                                    } else {
                                        throw new Error('validator ' + rule.key + ' not defined');
                                    }
                                } else {
                                    validator = this.validators[rule.key];
                                }
                                var validation = validator.call(this, value, rule.value, result);
                                var resultFn = function resultFn(validation) {
                                    if (validation.valid) {
                                        if (!result.immediate)
                                            result.model.clearError(keypath);
                                        if (typeof validation.coerced !== 'undefined')
                                            coerced = validation.coerced;
                                        if (i + 1 < rules.length) {
                                            return _this4.validateKeypathRules(value, keypath, result, rules, i + 1, coerced);
                                        } else {
                                            return coerced;
                                        }
                                    } else {
                                        result.valid = false;
                                        result.errors.set(keypath, validation.error);
                                        result.model.setError(keypath, validation.error);
                                    }
                                };
                                if (!validation) {
                                    throw new Error('validator ' + rule.key + ' did not return a value');
                                } else if (validation.then) {
                                    if (!Promise) {
                                        throw new Error('validator ' + rule.key + ' returns a promise and you don\'t have promise support');
                                    } else {
                                        return validation.then(resultFn);
                                    }
                                } else {
                                    return resultFn(validation);
                                }
                            }
                        },
                        {
                            key: 'wrapModel',
                            value: function wrapModel(model) {
                                var _this = this;
                                model = model || this.model;
                                if (_jquery2['default'] && model instanceof _jquery2['default']) {
                                    model = new _FormModel2['default'](model);
                                } else {
                                    if (!(model.get && model.set)) {
                                        model = new _ObjectModel2['default'](model);
                                    }
                                    if (!model.expandKeypath) {
                                        model.expandKeypath = _ObjectModel2['default'].prototype.expandKeypath;
                                    }
                                    if (!model.setError) {
                                        model.setError = function (keypath, value) {
                                            this.set(keypath + _this.errorSuffix, value);
                                        };
                                    }
                                    if (!model.clearError) {
                                        model.clearError = function (keypath) {
                                            this.set(keypath + _this.errorSuffix);
                                        };
                                    }
                                }
                                return model;
                            }
                        }
                    ]);
                    return RactiveValidator;
                }();
            module.exports = RactiveValidator;
            var all = {
                    'validators': {
                        'moment': _require(5),
                        'password': _require(6),
                        'positive': _require(7),
                        'required': _require(8),
                        'type': _require(9)
                    }
                };
            all.validators.moment = all.validators.moment(_moment2['default']);
            RactiveValidator.validators = all.validators;
            RactiveValidator.ObjectModel = _ObjectModel2['default'];
            RactiveValidator.FormModel = _FormModel2['default'];
        },
        function (module, exports) {
            'use strict';
            module.exports = function (moment) {
                return function (value, format) {
                    var coerce, format, m, ref;
                    if (!moment) {
                        throw new Error('you don\'t have moment support');
                    }
                    if (typeof format !== 'string') {
                        ref = format, format = ref.format, coerce = ref.coerce;
                    }
                    if (typeof value === 'undefined' || value === null || value === '') {
                        return { valid: true };
                    }
                    m = moment.utc(value, format, true);
                    if (m.isValid()) {
                        if (coerce === true) {
                            return {
                                valid: true,
                                coerced: m
                            };
                        } else if (coerce === 'date') {
                            return {
                                valid: true,
                                coerced: m.toDate()
                            };
                        } else if (typeof coerce === 'string') {
                            return {
                                valid: true,
                                coerced: m.format(coerce)
                            };
                        } else {
                            return { valid: true };
                        }
                    } else {
                        return {
                            valid: false,
                            error: 'must be ' + format
                        };
                    }
                };
            };
        },
        function (module, exports) {
            'use strict';
            module.exports = function password(value, otherField, result) {
                if (value === result.model.get(otherField)) {
                    return { valid: true };
                } else {
                    return {
                        valid: false,
                        error: 'passwords must match'
                    };
                }
            };
        },
        function (module, exports) {
            'use strict';
            module.exports = function positive(value, type) {
                if (value >= 0) {
                    return { valid: true };
                } else {
                    return {
                        valid: false,
                        error: 'must be positive'
                    };
                }
            };
        },
        function (module, exports) {
            'use strict';
            module.exports = function required(value, required, result) {
                var group, groupName, groupValue, match, ref;
                if (required) {
                    if (typeof required === 'string') {
                        ref = required.match(/([^\.]+)=(.+)/) || [], match = ref[0], groupName = ref[1], groupValue = ref[2];
                        if (!match) {
                            throw new Error('invalid require rule: ' + required);
                        }
                        group = result.groups[groupName];
                        if (typeof value === 'undefined' || value === null || value === '') {
                            if (group === groupValue) {
                                return {
                                    valid: false,
                                    error: 'required'
                                };
                            } else {
                                return { valid: true };
                            }
                        } else {
                            if (group === void 0) {
                                result.groups[groupName] = groupValue;
                                return { valid: true };
                            } else if (group === groupValue) {
                                return { valid: true };
                            } else {
                                return {
                                    valid: false,
                                    error: 'not required'
                                };
                            }
                        }
                    } else {
                        if (typeof value === 'undefined' || value === null || value === '') {
                            return {
                                valid: false,
                                error: 'required'
                            };
                        } else {
                            return { valid: true };
                        }
                    }
                } else {
                    return { valid: true };
                }
            };
        },
        function (module, exports) {
            'use strict';
            module.exports = function type(value, type, result) {
                if (typeof value === 'undefined' || value === null) {
                    return { valid: true };
                }
                if (type === 'string') {
                    if (typeof value !== 'string') {
                        return {
                            valid: false,
                            error: 'must be a string'
                        };
                    } else {
                        return { valid: true };
                    }
                } else if (type === 'integer') {
                    if (value === '') {
                        return {
                            valid: true,
                            coerced: null
                        };
                    } else if (typeof value === 'number' && value % 1 !== 0 || typeof value !== 'number' && result.immediate || typeof value !== 'undefined' && value !== null && value !== '' && !/^(\-|\+)?([0-9]+)$/.test(value)) {
                        return {
                            valid: false,
                            error: 'must be a whole number'
                        };
                    } else {
                        return {
                            valid: true,
                            coerced: Number(value)
                        };
                    }
                } else if (type === 'decimal') {
                    if (value === '') {
                        return {
                            valid: true,
                            coerced: null
                        };
                    } else if (typeof value !== 'number' && result.immediate || typeof value !== 'undefined' && value !== null && value !== '' && !/^(\-|\+)?([0-9]+(\.[0-9]+)?)$/.test(value)) {
                        return {
                            valid: false,
                            error: 'must be a decimal'
                        };
                    } else {
                        return {
                            valid: true,
                            coerced: Number(value)
                        };
                    }
                } else if (type === 'boolean') {
                    if (value === '') {
                        return {
                            valid: true,
                            coerced: null
                        };
                    } else if (typeof value !== 'boolean' && result.immediate || typeof value !== 'undefined' && value !== null && value !== '' && !/^(true|false)$/.test(value)) {
                        return {
                            valid: false,
                            error: 'must be a boolean'
                        };
                    } else {
                        return {
                            valid: true,
                            coerced: value === 'true' || value === true
                        };
                    }
                } else {
                    throw new Error('unknown data type ' + type);
                }
            };
        }
    ];
    return _require(4);
}));